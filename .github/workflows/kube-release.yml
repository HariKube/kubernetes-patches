name: Kube Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Kubernetes version'
        required: true
        type: string

concurrency: 
  group: ${{ github.ref_name }}-release
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  release-image:
    strategy:
      matrix:
        what:
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler
        - kube-proxy
        arch:
        - amd64
        - ppc64le
        - s390x
        - arm64
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - uses: actions/checkout@v4
      with:
        repository: kubernetes/kubernetes
        ref: ${{ inputs.version }}
        path: kubernetes
        token: ${{ secrets.GIT_HUB_TOKEN }}
        github-server-url: https://github.com
    - name: Login to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.REGISTRY }}
        username: ${{ vars.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_TOKEN }}
    - name: Patch Kubernetes
      run: |
        (cd kubernetes ; git apply ${{ github.workspace }}/kubernetes-${{ inputs.version }}.patch)
        sed -i 's#$(kube::util::host_arch)#$(echo ${{ matrix.arch }})#' ${{ github.workspace }}/kubernetes/hack/lib/golang.sh
        sed -i 's#$(kube::golang::server_image_targets)#$(kube::golang::server_image_targets  | tr " " "\\n" | grep ${{ matrix.what }})#' ${{ github.workspace }}/kubernetes/hack/lib/golang.sh
        sed -i 's#kube::build::get_docker_wrapped_binaries#kube::build::get_docker_wrapped_binaries  | tr " " "\\n" | grep ${{ matrix.what }}#' ${{ github.workspace }}/kubernetes/build/lib/release.sh
        sed -i 's#kube::build::verify_prereqs#export KUBE_BUILD_PLATFORMS="linux/${{ matrix.arch }}"\nexport CMD_TARGETS="cmd/${{ matrix.what }}"\nexport WAHT="cmd/${{ matrix.what }}"\nkube::build::verify_prereqs#' ${{ github.workspace }}/kubernetes/build/release-images.sh
    - name: Build Kubernetes images
      run: make -C kubernetes release-images
      env:
        KUBE_FASTBUILD: "true"
        KUBE_GIT_TREE_STATE: clean
        KUBE_GIT_VERSION: ${{ inputs.version }}
        KUBE_RELEASE_RUN_TESTS: n
        KUBE_DOCKER_REGISTRY: ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}
    - name: Push images
      run: |
        docker tag ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}-${{ matrix.arch }}:${{ inputs.version }} ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-${{ matrix.arch }}
        docker push --platform linux/${{ matrix.arch }} ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-${{ matrix.arch }}
  publish-manifest:
    strategy:
      matrix:
        what:
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler
        - kube-proxy
    needs: release-image
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    - name: Login to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.REGISTRY }}
        username: ${{ vars.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_TOKEN }}
    - name: Pull images
      run: |
        docker push ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-amd64
        docker push ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-ppc64le
        docker push ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-s390x
        docker push ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-arm64
    - name: Create manifest
      run: |
        docker manifest create ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }} \
        ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-amd64 \
        ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-ppc64le \
        ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-s390x \
        ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}-arm64
    - name: Push manifest
      run: docker manifest push ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/${{ matrix.what }}:${{ inputs.version }}
